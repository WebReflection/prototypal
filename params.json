{"name":"Prototypal","tagline":"modern JS inheritance done right","body":"prototypal\r\n==========\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/prototypal.png)](http://travis-ci.org/WebReflection/prototypal)\r\n\r\n[Mit Style License](./LICENSE.txt)\r\n\r\nThis is the result of a \"_tour de force_\" out of 4 blog posts about [ECMAScript 5 Descriptors](http://webreflection.blogspot.com/2014/03/what-books-wont-tell-you-about-es5.html) and probably the most compatible `Class` solution entirely based on ES5 Standards you can find these days.\r\n\r\nIt has been simplified as much as possible and it's a lightweight replacement for an older [redefine.js](https://github.com/WebReflection/redefine#redefinejs) proposal, fitting in about 700bytes minzipped and solving in its core a lot of problems that older, as well as modern Desktop or Mobile browsers, introduced in these days web development.\r\n\r\n\r\n### prototypal.Class\r\nThe **API** is straight forward, `Class({ .. properties .. })` or `Class(extend, { .. properties .. })`, where `extend` can be either `null`, any `object`, or simply a `Function` where in latter case its prototype will be automatically used to chain inheritance.\r\n```javascript\r\n// a Null class example\r\nvar Null = Class(null, {});\r\nvar n = new Null;\r\nn instanceof Object; // false\r\n\r\n// a generic class example\r\nvar Rectangle = Class({\r\n\r\n  // constructor\r\n  constructor: function (width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n  },\r\n\r\n  // some method\r\n  toString: function () {\r\n    return '[object Rectangle]';\r\n  },\r\n\r\n  // default properties\r\n  width: 0,\r\n  height: 0,\r\n\r\n  // a simple getter to retrieve the area\r\n  area: Class.descriptor({\r\n    get: function () {\r\n      return this.width * this.height;\r\n    }\r\n  })\r\n});\r\n\r\n// a generic extend example\r\nvar Square = Class( Rectangle, {\r\n  constructor: function (size) {\r\n    Rectangle.call(this, size, size);\r\n  },\r\n  toString: function () {\r\n    return '[object Square]';\r\n  }\r\n});\r\n\r\nvar s = new Square(3);\r\ns.area; // 9\r\n'' + s; // [object Square]\r\n```\r\n\r\n\r\n### About Descriptors\r\nBy default, all properties are the same as those found in native JavaScript _classes_\r\n```javascript\r\n// example of native descriptor\r\nObject.getOwnPropertyDescriptor(\r\n  Object.prototype,\r\n  'toString'\r\n);\r\n\r\n{ value: [Function: toString],\r\n  writable: true,\r\n  enumerable: false,\r\n  configurable: true }\r\n```\r\nThese settings avoid any sort of problems when it comes to inherited defaults, as well as overwritten methods.\r\n\r\n\r\n#### Class.descriptor({ .. ES5 descriptor .. })\r\nIn case any other descriptor is needed, the `Class` offers an easy way do define exactly the needed one:\r\n```javascript\r\n// based on previous example\r\nvar Rectangle = Class({\r\n\r\n  // ... code as seen before ... \r\n\r\n  // specifying a descriptor as\r\n  // enumerable: false\r\n  // configurable: false\r\n  // get: function () { ... }\r\n  area: Class.descriptor({\r\n    get: function () {\r\n      return this.width * this.height;\r\n    }\r\n  })\r\n\r\n});\r\n```\r\n\r\n\r\n#### Class.lazy(callback)\r\n`lazy` is useful to set a property once avoiding expensive computations or, as example, creating maybe not always needed extra objects, preserving performance, CPU, and allocated RAM.\r\n```javascript\r\nvar Person = Class({\r\n  constructor: function (parents) {\r\n    this.parents = parents;\r\n  },\r\n  // here an example of ..\r\n  //   . something maybe not needed right on\r\n  //   . something not always accessed\r\n  //   . something expensive to compute\r\n  // once computed there is no need\r\n  // to compute it again so it should\r\n  // rather be a property than a method\r\n  genealogicTree: Class.lazy(function() {\r\n    var p = this.parents,\r\n        mom = p[0],\r\n        dad = p[1],\r\n        tree = {\r\n          mom: [mom],\r\n          dad: [dad]\r\n        };\r\n    p = mom;\r\n    while (p = p.parents) {\r\n      tree.mom.push(\r\n        p[0].genealogicTree,\r\n        p[1].genealogicTree\r\n      );\r\n    }\r\n    p = dad;\r\n    while (p = p.parents) {\r\n      tree.dad.push(\r\n        p[0].genealogicTree,\r\n        p[1].genealogicTree\r\n      );\r\n    }\r\n    // returning the object that\r\n    // will be set as\r\n    // non writable\r\n    // but configurable\r\n    return tree;\r\n  })\r\n});\r\n```\r\nBeing configurable, whenever there is a need to recalculate the property it's still possible to `delete me.genealogicTree` and retrieve it again.\r\n\r\n\r\n#### Class.bound(callback)\r\nThis is a simple internal `lazy` based hook able to automatically bind a method the very first time is accessed.\r\n```javascript\r\nvar MouseHandler = Class({\r\n  onClick: Class.bound(function (evt) {\r\n    evt.preventDefault();\r\n    alert(this instanceof MouseHandler); // true\r\n  })\r\n});\r\n\r\nvar mh = new MouseHandler;\r\ndocument.body.addEventListener('click', mh.onClick);\r\n```\r\n\r\n\r\n### Compatibility\r\n**Browsers**\r\n  * Opera Desktop, Opera Mobile, and Opera Mini if using [es5-shim and es5-sham](./test/es5.js) upfront\r\n  * WebKit Android 2+\r\n  * IE9 Desktop or Mobile and above\r\n  * Kindle Fire Silk\r\n  * webOS 2\r\n  * Firefox and Firefox Mobile or FirefoxOS\r\n  * Chrome\r\n  * Safari and Safari Mobile in iOS5+\r\n\r\n**Server**\r\n  * node.js, travis builds on 0.8 and higher, might work on 0.6 too\r\n  * need to tests nashorn but `wru` does not work there for some reason I haven't figure out yet\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}